{
  "hash": "e0d7ca817e6c0d1fd0eb472a528ae840",
  "result": {
    "markdown": "---\ntitle: \"Network Mapping the Most Influential Addresses Using DAI (2021)\"\nauthor: \"Victor Lao\"\ndate: 2022-09-01\noutput: \n  blogdown::html_page:\n    toc: true\n    fig_crop: no\n---\n\n\n## Introduction\n\nDecentralized Autonomous Organizations (DAO) use the blockchain to conduct \ntransparent corporate operations. One of the most successful DAOs to date is \nMakerDAO. Their staying power in the tumultuous environment of crypto is largely \nattributed to the wide adoption of their overcollateralized backed USD stable \ncoin, DAI.\n\nAll blockchain transactions are public and pseudonymous. This gives \nunprecedented public transparency to the inner workings of blockchain based \nbusinesses and their products. In this report, I extract all DAI specific \ntransfers of value and map influential addresses in an interactive \nnetwork using ggraph and visNetwork to investigate key actors in the DAI \necosystem. I will outline my methodology and analyze the resultant networkmap.\n\n## Methodology\n\n\n\n\nUsing the MakerDAO events table I created, I subset all DAI events. Values were \nstored in BigQuery as hexadecimals because values were too large to store in \nBigQuery. \n\n::: {.cell}\n\n```{.sql .cell-code}\nCREATE TABLE \n  makerdao_operations.dai_events_may2021to2022\nPARTITION BY DATE (\n  block_timestamp\n)\nCLUSTER BY\n  makerdao_smartcontract,\n  makerdao_function\nAS (\n  SELECT\n    block_timestamp,\n    makerdao_smartcontract,\n    makerdao_function,\n    to_address AS transaction_sender,\n    from_address AS transaction_reciever,\n    sender AS event_sender,\n    reciever AS event_reciever,\n    eth_value,\n    value,\n    percision\n  FROM `ethereum-explorer-354118.makerdao_operations.may2021to2022`\n  WHERE makerdao_smartcontract IN (\n    'DAI',\n    'DAIJOIN',\n    'GEMJOIN',\n    'JUG',\n    'POT'\n  )\n)\n```\n:::\n\nThe subset table was imported into R and converted into decimal form according \nto the event specific degree of precision. \n\n::: {.cell}\n\n```{.r .cell-code}\n#clean data from extracted from google bigquery\ndata <- as_tibble(\n  read.csv(\n    file = 'dai_events_may2021to2022.csv',\n    header = TRUE,\n    colClasses = c(\"Date\", \"character\", \"character\", \"character\",\n                  \"character\", \"numeric\", \"character\"))) %>% \n  mutate(value =\n    ifelse (percision == 'wad', value/10e18,\n      ifelse (percision == 'ray', value/10e27,\n        ifelse (percision == 'rad', value/10e45, NaN)))) %>% \n  select(-percision)\n```\n:::\n\nFinally, all transfer (of value) events pertaining to the DAI smartcontract \nwere extracted.\n\n::: {.cell}\n\n```{.r .cell-code}\n#filter events to pull out only DAI transaction data\ndai_transactions <- data %>% \n  filter(makerdao_smartcontract == 'DAI' & \n    makerdao_function == 'transfer')\n```\n:::\n\n\nBefore mapping a network, data had to be transformed into a form readable by\nnetwork mapping packages. The node list was formed from unique senders and \nreceivers. The edge list was formed from all transactions between unique \naddresses. Multiple transactions between the same addresses were counted as \n'weight'. Total transaction value was summed for each unique address pair.\n\n::: {.cell}\n\n```{.r .cell-code}\n#create node list (list of nodes with corresponding IDs)\nnode_list <- dai_transactions %>% \n  distinct(sender) %>% \n  full_join(distinct(dai_transactions, reciever), \n    by = c(\"sender\" = \"reciever\")) %>% \n  rowid_to_column(\"id\")\n\n#check node list\nnode_list\n\n#create edge list with count as weight and add value column\nedge_list <- dai_transactions %>% \n  group_by(sender, reciever) %>% \n  summarize(weight = n(), amount = sum(value)) %>% \n  ungroup()\n\n#convert edge list addresses into id specified in node_list\nedge_list_byid <- edge_list %>%\n  left_join(node_list, by = \"sender\") %>%\n  rename(from = id) %>%\n  left_join(node_list, by = c(\"reciever\" = \"sender\")) %>%\n  rename(to = id) %>%\n  select(from, to, weight, amount)\n\n#check converted edge_list then remove original\nedge_list_byid\n```\n:::\n\n\nIt is not uncommon for a user to have multiple accounts which can skew network\nanalysis if not accounted for. To alleviate the effects of this, I used the\ninfomap algorithm to cluster addresses into communities. The rationale was that \nmost alternate accounts would closely transact with each other forming distinct\nclusters. The infomap algorithm was used as it takes into account edge (trade) \ndirection. In order to identified key nodes in the network, addresses' \neigenvector centrality was calculated using trade frequency as a weight.\n\n::: {.cell}\n\n```{.r .cell-code}\n#using the node_list and edge_list_byid we can create a\n#graph object\ngraph <- tbl_graph(nodes = node_list, edges = edge_list_byid, \n          directed = TRUE)\n\n#cluster nodes to find communities and centralities and rewrite graph object\ngraph <- graph %>%\n  activate(nodes) %>%\n  mutate(community = group_infomap(weights = weight)) %>%\n  mutate(centrality = centrality_eigen(weights = weight, directed = TRUE))\n```\n:::\n\n\nAs the DAI transaction dataset consists of over 1,500,000 transactions, addresses\n(nodes) were filtered for unique transaction pairs (edges) that were in the \ntop 50% quantile for total transaction amount. Low value transacting nodes are\nunlikely to be key to the network. As I am looking for important actors in the\nnetwork, I selected for the top 0.1% of addresses by eigenvector centrality.\nThe selected addresses were collapsed on their communities.\n\n::: {.cell}\n\n```{.r .cell-code}\n#filter graph by centrality to reduce size by trimming data to visualize, value amount filtered to remove low value actors\n#note this also reduces community sizing as low value actors are excluded\nfiltered_graph <- graph %>%\n  activate(edges) %>%\n  filter(amount > quantile(amount, 0.50), weight > 100) %>%\n  activate(nodes) %>%\n  filter(centrality > quantile(centrality, 0.999)) %>%\n  filter(!node_is_isolated())\n\n#network is too large to be visualized so it will be contracted on its communities, weight and value will be summed\ncontracted_graph <- filtered_graph %>%\n  activate(nodes) %>%\n  convert(to_contracted, community) %>%\n  activate(nodes) %>%\n  mutate(community_size = map_dbl(.orig_data, ~ nrow(.x))) %>%\n  activate(edges) %>%\n  mutate(contracted_weight = map_dbl(.orig_data, ~ sum(.x$weight)), \n         contracted_amount = map_dbl(.orig_data, ~ sum(.x$amount)))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\ncontracted_graph <- readRDS(\"contracted_graph.rds\")\ncontracted_graph\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tbl_graph: 184 nodes and 968 edges\n#\n# A directed simple graph with 1 component\n#\n# Edge Data: 968 × 6 (active)\n   from    to .tidygraph_edge_index .orig_data        contracted_weight contrac…\n  <int> <int> <list>                <list>                        <dbl>    <dbl>\n1     1     2 <int [45]>            <tibble [45 × 4]>             61537   4.00e8\n2     1     3 <int [4]>             <tibble [4 × 4]>               1777   2.89e6\n3     1     4 <int [20]>            <tibble [20 × 4]>              5699   7.94e6\n4     1     5 <int [2]>             <tibble [2 × 4]>                332   1.58e6\n5     1     6 <int [13]>            <tibble [13 × 4]>              4668   1.59e7\n6     1     7 <int [15]>            <tibble [15 × 4]>             13995   1.26e8\n# … with 962 more rows\n#\n# Node Data: 184 × 4\n  community .orig_data        .tidygraph_node_index community_size\n      <int> <list>            <list>                         <dbl>\n1        56 <tibble [95 × 3]> <int [95]>                        95\n2         8 <tibble [4 × 3]>  <int [4]>                          4\n3        72 <tibble [1 × 3]>  <int [1]>                          1\n# … with 181 more rows\n```\n:::\n:::\n\nResulting network was graphed using ggraph. Node radius reflected community size\nand color reflected degree of connections (darker blue representing a higher \ndegree).\n\n::: {.cell}\n\n```{.r .cell-code}\n#graph network\nnetwork_graph <- ggraph(contracted_graph, layout = 'igraph', algorithm = 'kk') +\n  geom_edge_link(aes(edge_alpha = contracted_weight, edge_colour = contracted_amount)) +\n  scale_edge_colour_continuous(high = '#000000', low = '#56B1F7') +\n  geom_node_point(aes(size = sqrt(community_size), colour = centrality_degree())) +\n  scale_colour_continuous(high = '#000000', low = '#56B1F7')\n```\n:::\n\n::: {.cell}\n::: {.cell-output .cell-output-stderr}\n```\nWarning: Using the `size` aesthetic in this geom was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` in the `default_aes` field and elsewhere instead.\n```\n:::\n\n::: {.cell-output-display}\n![](DAI_transfer_network_report_files/figure-html/unnamed-chunk-10-1.png){width=100%}\n:::\n:::\n\n\nThough some tentative conclusions may be made about the general network, there\nare too many nodes to pick out key addresses. Only the highest valued \ntransaction pairs were selected to keep the map readable.\n\n::: {.cell}\n\n```{.r .cell-code}\n#subset graph on value transacted to visualize high value connections (and importantly, visualize readable labels)\n\nsubset_graph <- contracted_graph %>%\n  activate(edges) %>%\n  top_n(50, contracted_amount) %>%\n  activate(nodes) %>%\n  filter(!node_is_isolated())\n\nsubset_network_graph <- ggraph(subset_graph, layout = 'igraph', algorithm = 'kk') +\n  geom_edge_link(aes(edge_alpha = contracted_weight, edge_colour = contracted_amount)) +\n  scale_edge_colour_continuous(high = '#000000', low = '#56B1F7') +\n  geom_node_point(aes(size = sqrt(community_size), colour = centrality_degree())) +\n  scale_colour_continuous(high = '#000000', low = '#56B1F7') +\n  geom_node_text(aes(label = community), position = position_nudge(x = 0.2, y = 0.2))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](DAI_transfer_network_report_files/figure-html/unnamed-chunk-12-1.png){width=100%}\n:::\n:::\n\nCommunity 56 looked to be the most promising community and was thus graphed.\n\n::: {.cell}\n\n```{.r .cell-code}\n#graph community 56\n\ncommunity_56_graph <- graph %>%\n  activate(nodes) %>%\n  filter(community == 56) %>%\n  activate(edges) %>%\n  filter(amount > quantile(amount, 0.99)) %>%\n  activate(nodes) %>%\n  filter(!node_is_isolated())\n\ncommunity_56_network_graph <- ggraph(community_56_graph, layout = 'igraph', algorithm = 'graphopt') +\n  geom_edge_link(color = 'sky blue') +\n  geom_node_point(aes(size = sqrt(centrality)))\n```\n:::\n\n::: {.cell}\n::: {.cell-output-display}\n![](DAI_transfer_network_report_files/figure-html/unnamed-chunk-14-1.png){width=100%}\n:::\n:::\n\n\nAs addresses are long and cumbersome to read, I thought an interactive \nvisualization may be more user friendly. Before mapping in visNetwork, \ncommunity 56 data had to be transformed into a format visNetwork would accept.\n\n::: {.cell}\n\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n#prepare data for visualization of community 56 in order to display addresses (sender) in a readable way\n\n#create color palette for groups\npalette <- as_tibble(brewer.pal(6, 'Set3'))\n\nvis_edge_list <- community_56_graph %>%\n  activate(edges) %>%\n  arrange(desc(to)) %>%\n  as_tibble() %>%\n  mutate(arrows = 'to') %>%\n  rename(title = amount, value = weight)\n\nvis_edge_list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 86 × 5\n    from    to value    title arrows\n   <int> <int> <int>    <dbl> <chr> \n 1    49    52     1 1200000  to    \n 2    17    50    34 1614047. to    \n 3    18    49    48 1403938. to    \n 4    18    48     8  898990. to    \n 5    18    47    20 1287273. to    \n 6    18    46     3  836676. to    \n 7    10    45    32  797796. to    \n 8    17    44    20 2348153. to    \n 9    17    43    53 1594078. to    \n10    28    40    14 1570956. to    \n# … with 76 more rows\n```\n:::\n\n```{.r .cell-code}\nvis_node_list <- community_56_graph %>%\n  activate(nodes) %>%\n  mutate(grouping = group_infomap()) %>%\n  as_tibble() %>%\n  select(-id, -community) %>%\n  rowid_to_column('id') %>%\n  rename(title = sender, value = centrality) %>%\n  mutate(label = \"\", color = case_when(grouping == 1 ~ '#FB8072',\n                                       grouping == 2 ~ '#FFFFB3',\n                                       grouping == 3 ~ '#BEBADA',\n                                       grouping == 4 ~ '#8DD3C7',\n                                       grouping == 5 ~ '#80B1D3',\n                                       grouping == 6 ~ '#FDB462'))\n\nvis_node_list\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 54 × 6\n      id title                                         value group…¹ label color\n   <int> <chr>                                         <dbl>   <int> <chr> <chr>\n 1     1 0x0000000000007f150bd6f54c40a34d7c3d5e9f56 0.0598         2 \"\"    #FFF…\n 2     2 0xf7d9c9c06812c4a611a352ac82f638bdca6e09a8 0.0200         4 \"\"    #8DD…\n 3     3 0xd0effc6828972483db1c64106f71d6ad12606a53 0.0135         4 \"\"    #8DD…\n 4     4 0x2af33e93f68b8497bb535c492f5867c7e83f2bc4 0.000482       1 \"\"    #FB8…\n 5     5 0xe592427a0aece92de3edee1f18e0157c05861564 0.447          4 \"\"    #8DD…\n 6     6 0x6c2d992b7739dfb363a473cc4f28998b7f1f6de2 0.00219        2 \"\"    #FFF…\n 7     7 0x2a84e2bd2e961b1557d6e516ca647268b432cba4 0.00911        3 \"\"    #BEB…\n 8     8 0x4a137fd5e7a256ef08a7de531a17d0be0cc7b6b6 0.0165         3 \"\"    #BEB…\n 9     9 0x4d246be90c2f36730bb853ad41d0a189061192d3 0.0261         5 \"\"    #80B…\n10    10 0xbf3f6477dbd514ef85b7d3ec6ac2205fd0962039 0.0105         1 \"\"    #FB8…\n# … with 44 more rows, and abbreviated variable name ¹​grouping\n```\n:::\n:::\n\nNetwork was mapped so that addresses would display on node mouse over and total\ntransaction value would display on edge mouse over. Click lights up one degree \nof edges.\n\n::: {.cell}\n\n```{.r .cell-code}\n#graph dynamic network with prepared data\ndynamic_network_graph <- visNetwork(vis_node_list, vis_edge_list, main = \n                                    \"Transaction Network of Top 1% Most Influential Addresses Using DAI\") %>%\n  visOptions(highlightNearest = list(enabled = TRUE, degree = list(from = 0, to = 1))) %>%\n  visInteraction(dragView = FALSE) %>%\n  visLayout(randomSeed = 11)\n\ndynamic_network_graph\n```\n\n::: {.cell-output-display}\n```{=html}\n<div class=\"visNetwork html-widget html-fill-item-overflow-hidden html-fill-item\" id=\"htmlwidget-e7134b4bb77ae599d282\" style=\"width:100%;height:464px;\"></div>\n<script type=\"application/json\" data-for=\"htmlwidget-e7134b4bb77ae599d282\">{\"x\":{\"nodes\":{\"id\":[1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54],\"title\":[\"0x0000000000007f150bd6f54c40a34d7c3d5e9f56\",\"0xf7d9c9c06812c4a611a352ac82f638bdca6e09a8\",\"0xd0effc6828972483db1c64106f71d6ad12606a53\",\"0x2af33e93f68b8497bb535c492f5867c7e83f2bc4\",\"0xe592427a0aece92de3edee1f18e0157c05861564\",\"0x6c2d992b7739dfb363a473cc4f28998b7f1f6de2\",\"0x2a84e2bd2e961b1557d6e516ca647268b432cba4\",\"0x4a137fd5e7a256ef08a7de531a17d0be0cc7b6b6\",\"0x4d246be90c2f36730bb853ad41d0a189061192d3\",\"0xbf3f6477dbd514ef85b7d3ec6ac2205fd0962039\",\"0x53e836dbb301dc78d73c8fff8014330bc5f21695\",\"0x741aa7cfb2c7bf2a1e7d4da2e3df6a56ca4131f3\",\"0x492f5e8b40da0b02742b658780483d9dfae13cb3\",\"0x495f8ef80e13e9e1e77d60d2f384bb49694823ef\",\"0x00000000008c4fb1c916e0c88fd4cc402d935e7d\",\"0x000000000dfde7deaf24138722987c9a6991e2d4\",\"0x220bda5c8994804ac96ebe4df184d25e5c2196d4\",\"0x1111111254fb6c44bac0bed2854e76f90643097d\",\"0x2057cfb9fd11837d61b294d514c5bd03e5e7189a\",\"0x020d0886d0a1b55e9362f9b00095db5775c7754d\",\"0xa91c2ceb9d2e343bfd5a12d5b3b3794346a8c473\",\"0xcf2bb5dd1d0e175b7e13c5028f58fc4f5bfb99cb\",\"0x68b3465833fb72a70ecdf485e0e4c7bd8665fc45\",\"0xb65fc555b0e970b16329a48e45cfa14fce9a36a4\",\"0xa8ecaf8745c56d5935c232d2c5b83b9cd3de1f6a\",\"0x5d0eb3a4cada50e1a3668601834ce6039db87657\",\"0xeef86c2e49e11345f1a693675df9a38f7d880c8f\",\"0x7bfee91193d9df2ac0bfe90191d40f23c773c060\",\"0x8474ddbe98f5aa3179b3b3f5942d724afcdec9f6\",\"0x5097119dcb1ce3725dbcbe42356722dbacfc3b81\",\"0xb6aab2b026752a971f8944a6aed371b74e2bc4f8\",\"0x4f0a296cbfa854be4b97df5c1f36f5140f6297e5\",\"0x13bb0ae230504a389989fd00df6dae9e2a873d5e\",\"0x67c89126fb7e793a2fac54e0c4bd8baa53395767\",\"0xeb5455590bb2bf67d54d7d3affaa1930c5132b14\",\"0xc37704a457b1ee87eb657cae584a34961e86acac\",\"0x61746f8673eea1c514696bc523ca991ff5864e77\",\"0x1bf531eb5a835a05d1a60405159219230a0b4491\",\"0xed99c6929bba505a2f1a65b9ca156a068fab6427\",\"0x6db544e2a4464762c4df0876389c5357fa7a3a93\",\"0xae33fb0ceb844559c638b23725f009e2f182c862\",\"0xf9c342c85495ab28e5aeb875a8c53f4904556570\",\"0xc73f6738311e76d45dfed155f39773e68251d251\",\"0x45fd5af82a8af6d3f7117ebb8b2cfad72b27342b\",\"0x1e3d6eab4bcf24bcd04721caa11c478a2e59852d\",\"0x3cbc3bed185b837d79ba18d36a3859ecbcfc3dc8\",\"0x8eb53edc3aa96c3f53dd401a57e875348270ee9a\",\"0x408fead9c7943ba7deb3dc4f2f93f765455f177c\",\"0xfe19b054f7b0cb7f4c051372ab2bd799472583cc\",\"0x3d2fb958376ee1ca22322b2c226666e414c3cfdd\",\"0x904a22dcbbfb961568312d5cce301bf165c2a1fb\",\"0x0e8eb2232fc3fb0c10756cd65d7052987d6316f4\",\"0xdb29ec3fb265a03943bfedbdf4ee9d9867b368e8\",\"0x823332a8f6c0bc4c5fe8fb522c81aec9806334c3\"],\"value\":[0.0598064373490525,0.0199709778679289,0.0134945574616516,0.000481961656136217,0.447401234539845,0.00218606079757462,0.00911190533064987,0.0164763074688632,0.0261383052781373,0.0104740158249926,0.00184380047177324,0.000351722455275999,1.8938242192762e-05,0.00493625981191654,0.01868580962229,0.0010766911920166,0.0871136328210254,0.0238182875154308,0.0225749635196859,0.000150588582558397,0.00011235135093496,9.77658380498964e-06,0.0212832353631039,0.00354180433129887,0.00254624309186905,9.9314077935092e-05,0.0214720290591846,0.00018828712194414,6.11007142693704e-05,2.4138259015782e-05,8.55961765135748e-09,0.000815722469927886,0.00109103092648438,2.62569330818482e-06,0.000195032527632946,1.43592996929036e-05,0.0006970349235991,5.18371405313973e-07,5.51331014084187e-05,5.54279564210723e-08,8.55961765135761e-09,2.57357681557853e-08,0.000255725595803692,0.000179466871236503,0.000405553182324129,1.63534529494162e-05,1.00166095026929e-05,4.00664380107716e-06,3.78711102254493e-05,7.57211396351081e-05,5.00830475141271e-07,7.96321150955129e-10,2.74015736472534e-10,1.4536575306443e-07],\"grouping\":[2,4,4,1,4,2,3,3,5,1,5,1,2,3,6,3,1,1,1,1,1,1,1,1,1,3,1,1,1,5,1,2,2,1,6,1,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1],\"label\":[\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\",\"\"],\"color\":[\"#FFFFB3\",\"#8DD3C7\",\"#8DD3C7\",\"#FB8072\",\"#8DD3C7\",\"#FFFFB3\",\"#BEBADA\",\"#BEBADA\",\"#80B1D3\",\"#FB8072\",\"#80B1D3\",\"#FB8072\",\"#FFFFB3\",\"#BEBADA\",\"#FDB462\",\"#BEBADA\",\"#FB8072\",\"#FB8072\",\"#FB8072\",\"#FB8072\",\"#FB8072\",\"#FB8072\",\"#FB8072\",\"#FB8072\",\"#FB8072\",\"#BEBADA\",\"#FB8072\",\"#FB8072\",\"#FB8072\",\"#80B1D3\",\"#FB8072\",\"#FFFFB3\",\"#FFFFB3\",\"#FB8072\",\"#FDB462\",\"#FB8072\",\"#FFFFB3\",\"#FB8072\",\"#FB8072\",\"#FB8072\",\"#FB8072\",\"#FB8072\",\"#FB8072\",\"#FB8072\",\"#FB8072\",\"#FB8072\",\"#FB8072\",\"#FB8072\",\"#FB8072\",\"#FB8072\",\"#FB8072\",\"#FB8072\",\"#FB8072\",\"#FB8072\"]},\"edges\":{\"from\":[49,17,18,18,18,18,10,17,17,28,1,18,15,18,1,1,9,18,29,24,14,12,18,17,23,18,18,18,19,17,20,45,44,12,54,21,24,43,22,45,19,17,20,52,38,45,4,46,50,48,44,12,28,47,51,21,41,24,31,43,22,53,39,42,14,35,16,8,9,26,6,9,14,30,11,7,14,8,1,3,2,5,33,32,37,6],\"to\":[52,50,49,48,47,46,45,44,43,40,37,36,35,34,33,32,30,28,27,27,26,25,24,24,24,22,21,20,20,20,19,19,19,19,19,19,19,19,19,18,18,18,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,16,15,14,14,14,14,13,11,9,9,9,8,8,7,6,5,5,2,1,1,1,1],\"value\":[1,34,48,8,20,3,32,20,53,14,550,13,18,5,839,634,37,13,5,33,952,49,20,122,21,11,102,4,49,51,16,40,34,120,1,31,28,15,6,18,2467,6275,84,1,7,103,6,5,45,3,72,702,22,9,1,85,1,125,1,35,7,1,2,2,927,18,798,498,424,943,412,381,362,14,298,613,521,553,1598,721,1220,1352,775,624,470,1204],\"title\":[1200000,1614047.15922928,1403937.96429572,898990.402058409,1287272.873,836676.156251469,797795.693686491,2348153.00366574,1594077.65701327,1570955.56843445,1999583.55864796,1378547.01968808,1491735.5656657,1139868.18436652,2085219.96196121,2184762.16452968,6180336.9,1126113.75978158,945007.333569781,704315.483819568,939432.52670465,569019.343285283,636668.929727961,4066551.6516145,746266.501517672,1466182.42627354,3395856.22264152,1388981.09661496,1212318.38003931,1793048.87387372,2233092.7689604,1049630.38132226,2598189.28159781,3117221.90590561,557676.289995785,963168.351453562,730198.036341742,912280.145832011,710771.30304443,1073069.40352231,119396913.118397,249081227.763092,4461947.18973031,1200000,686991.131398957,2897240.86828625,613098.910782093,1443645.46517083,1703862.4932817,708586.700468409,5092223.88962697,20210639.1060596,1064045.05447372,1097229.529,600000,2183476.64655962,2564846.05345544,3641726.5050224,2582067.59709582,3241619.47454274,744080.482002552,689019.868290481,551519.833870961,7582623.88246797,985310.090069265,1491972.09950849,904946.583541667,716557.78578998,1005176.79141667,931265.532867287,6977831.76107892,2099414.83,848673.107266173,1742564.03873131,1635051.0082391,634789.422716012,790953.472894629,581287.294318349,5948884.20034053,667360.590952612,851230.224403176,603084.080273964,1934142.34479638,2071697.99021865,1901669.58289786,5467716.07027858],\"arrows\":[\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\",\"to\"]},\"nodesToDataframe\":true,\"edgesToDataframe\":true,\"options\":{\"width\":\"100%\",\"height\":\"100%\",\"nodes\":{\"shape\":\"dot\"},\"manipulation\":{\"enabled\":false},\"interaction\":{\"dragView\":false,\"zoomSpeed\":1},\"layout\":{\"randomSeed\":11}},\"groups\":[\"2\",\"4\",\"1\",\"3\",\"5\",\"6\"],\"width\":null,\"height\":null,\"idselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"useLabels\":true,\"main\":\"Select by id\"},\"byselection\":{\"enabled\":false,\"style\":\"width: 150px; height: 26px\",\"multiple\":false,\"hideColor\":\"rgba(200,200,200,0.5)\",\"highlight\":false},\"main\":{\"text\":\"Transaction Network of Top 1% Most Influential Addresses Using DAI\",\"style\":\"font-family:Georgia, Times New Roman, Times, serif;font-weight:bold;font-size:20px;text-align:center;\"},\"submain\":null,\"footer\":null,\"background\":\"rgba(0, 0, 0, 0)\",\"highlight\":{\"enabled\":true,\"hoverNearest\":false,\"degree\":{\"from\":0,\"to\":1},\"algorithm\":\"all\",\"hideColor\":\"rgba(200,200,200,0.5)\",\"labelOnly\":true},\"collapse\":{\"enabled\":false,\"fit\":false,\"resetHighlight\":true,\"clusterOptions\":null,\"keepCoord\":true,\"labelSuffix\":\"(cluster)\"},\"tooltipStay\":300,\"tooltipStyle\":\"position: fixed;visibility:hidden;padding: 5px;white-space: nowrap;font-family: verdana;font-size:14px;font-color:#000000;background-color: #f5f4ed;-moz-border-radius: 3px;-webkit-border-radius: 3px;border-radius: 3px;border: 1px solid #808074;box-shadow: 3px 3px 10px rgba(0, 0, 0, 0.2);\"},\"evals\":[],\"jsHooks\":[]}</script>\n```\n:::\n:::\n\n\n## Analysis\n\nTo determine if my analysis picked out key players in the the DAI ecosystem, I\nchecked to see if there were any exchange addresses. I expect exchanges would\nbe central to the network because they deal in high transaction volumes\nand values. Indeed, I found 0x220bda5c8994804ac96ebe4df184d25e5c2196d4 and \n0x1111111254fb6c44bAC0beD2854e76F90643097d. Both are smart contracts of 1inch,\na popular DeFi aggregator. Sushiswap's MANA-DAI pool, \n0x495F8Ef80E13e9E1e77d60d2f384bb49694823ef, was among the addresses visualized.\nAnd finally, Uniswap's V3 router 0xe592427a0aece92de3edee1f18e0157c05861564 was \nalso present.\n\nThe more unknown addresses provided interesting insight into the users that hold \nup DAI. 0x1e3D6eAb4BCF24bcD04721caA11C478a2e59852D is one such mysterious \naddress. Activity on this address stopped around May 2021 but beforehand seemed \ninvolved in high frequency trading of renBTC and wBTC. One explanation may be\nthat this address was an arbitrage trader transacting in BTC derived cryptos. \nTheir high DAI transaction values may indicate they used DAI as an arbitrage \ncurrency. DAI allows for fee-less flash-loans (loans that are instantaneously \npaid) making it very permissive for arbitrage traders.\n\n## References\n\nAlmende B.V. and Contributors, Thieurmel B, Robert T (2021). visNetwork: \nNetwork Visualization using 'vis.js' Library. R package version 2.1.0, \nURL https://CRAN.R-project.org/package=visNetwork\n\nGoogle (2021). BigQuery. URL https://cloud.google.com/bigquery\n\nNeuwirth E (2022). RColorBrewer: ColorBrewer Palettes. R package version 1.1-3,\nURL https://CRAN.R-project.org/package=RColorBrewer\n\nPedersen T (2021). ggraph: An Implementation of Grammar of Graphics for Graphs \nand Networks. R package version 2.0.5,\nURL https://CRAN.R-project.org/package=ggraph\n\nPedersen T (2022). tidygraph: A Tidy API for Graph Manipulation. R package \nversion 1.2.1, URL https://CRAN.R-project.org/package=tidygraph\n\nR Core Team (2021). R: A language and environment for statistical computing. \nR Foundation for Statistical Computing, Vienna, Austria. \nURL https://www.R-project.org/\n\nWickham et al., (2019). Welcome to the tidyverse. Journal of Open Source \nSoftware, 4(43), 1686, URL https://doi.org/10.21105/joss.01686\n",
    "supporting": [
      "DAI_transfer_network_report_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<script src=\"../../site_libs/htmlwidgets-1.6.1/htmlwidgets.js\"></script>\r\n<link href=\"../../site_libs/vis-9.1.0/vis-network.min.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/vis-9.1.0/vis-network.min.js\"></script>\r\n<script src=\"../../site_libs/visNetwork-binding-2.1.2/visNetwork.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}